package com.yunjian.test;

import java.io.UnsupportedEncodingException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import org.junit.Test;

import com.yunjian.server.util.ByteUtils;
import com.yunjian.server.util.DateUtils;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

public class ByteTest {
	
	@Test
	public void test1() {
		byte[] data = {(byte)0x02,(byte)0x07,(byte)0x01,(byte)0x30,(byte)0x04,(byte)0x02,(byte)0x03,(byte)0x31};
		byte[] data2 = {(byte)0x02,(byte)0x06,(byte)0x01,(byte)0xb0,(byte)0x01,(byte)0x03,(byte)0xb7};
		int code3 = ByteUtils.getBCC(data2);
		
		int nn = ByteUtils.byteToInt(data2[data2.length-1]);
		
		if(nn == code3) {
			System.out.println("校验成功");
		}else {
			System.out.println("校验失败");
		}
		
		System.out.println(Integer.toHexString(code3));
		System.out.println();
	}
	
	@Test
	public void test2() {
		byte[] data2 = {(byte)0x02,(byte)0x06,(byte)0x01,(byte)0xb0,(byte)0x01,(byte)0x03,(byte)0xb7};
		System.out.println(ByteUtils.toHexString(data2));
	}
	
	@Test
	public void test3() {
		byte by = (byte)0xB1;
		String byStr = ByteUtils.byteToBinaryString(by);
		System.out.println(byStr);
		ByteUtils.binStrToByteArr(byStr);
		byte[] b = ByteUtils.conver2HexToByte(byStr);
		System.out.println(b);
	}
	
	@Test
	public void test4() {
		byte[] by2 = {(byte)0x40,(byte)0x05};
		System.out.println(ByteUtils.getShort(by2,0));
	}
	
	@Test
	public void test5() {
		int n = 2;
		byte[] s = ByteUtils.short2ByteBigend( (short)n );
		System.out.println(ByteUtils.getShort(s,0));
	}
	
	@Test
	public void test6() {
		byte[] d = {(byte)0xE3,(byte)0x07,(byte)0x11,(byte)0x13,(byte)0x23,(byte)0x3A};
		
		byte[] time = ByteUtils.get6ByteTimeStamp();
		int year = (int)time[0];
		int month = (int)time[1];
		int day = (int)time[2];
		int hour = (int)time[3];
		int minute = (int)time[4];
		int second = (int)time[5];
		System.out.println("" + year + month + day + hour + minute + second);	
		
		String date = DateTimeFormatter.ofPattern("yyyyMMddHHmmss").format(LocalDateTime.now());
		System.out.println("转化前的日期：" + date);
		byte[] t = ByteUtils.str2Bcd(date);
		System.out.println("日期字节数组长度：" + t.length + " ,16进制字符串：" +ByteUtils.toHexString(t));
		System.out.println("解析后日期：" + ByteUtils.bcd2Str(t));
		
        
	}
	
	@Test
	public void test7() throws UnsupportedEncodingException {
		byte[] data = {(byte)0x48,(byte)0x54,(byte)0x54,(byte)0x50,(byte)0x2F,(byte)0x31,(byte)0x2E,(byte)0x31,(byte)0x20,(byte)0x34,(byte)0x30,(byte)0x30,(byte)0x20,(byte)0x0D,(byte)0x0A,(byte)0x43,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x65,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x54,(byte)0x79,(byte)0x70,(byte)0x65,(byte)0x3A,(byte)0x20,(byte)0x74,(byte)0x65,(byte)0x78,(byte)0x74,(byte)0x2F,(byte)0x68,(byte)0x74,(byte)0x6D,(byte)0x6C,(byte)0x3B,(byte)0x63,(byte)0x68,(byte)0x61,(byte)0x72,(byte)0x73,(byte)0x65,(byte)0x74,(byte)0x3D,(byte)0x75,(byte)0x74,(byte)0x66,(byte)0x2D,(byte)0x38,(byte)0x0D,(byte)0x0A,(byte)0x43,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x65,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x4C,(byte)0x61,(byte)0x6E,(byte)0x67,(byte)0x75,(byte)0x61,(byte)0x67,(byte)0x65,(byte)0x3A,(byte)0x20,(byte)0x65,(byte)0x6E,(byte)0x0D,(byte)0x0A,(byte)0x43,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x65,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x4C,(byte)0x65,(byte)0x6E,(byte)0x67,(byte)0x74,(byte)0x68,(byte)0x3A,(byte)0x20,(byte)0x38,(byte)0x30,(byte)0x30,(byte)0x0D,(byte)0x0A,(byte)0x44,(byte)0x61,(byte)0x74,(byte)0x65,(byte)0x3A,(byte)0x20,(byte)0x4D,(byte)0x6F,(byte)0x6E,(byte)0x2C,(byte)0x20,(byte)0x30,(byte)0x35,(byte)0x20,(byte)0x41,(byte)0x75,(byte)0x67,(byte)0x20,(byte)0x32,(byte)0x30,(byte)0x31,(byte)0x39,(byte)0x20,(byte)0x31,(byte)0x31,(byte)0x3A,(byte)0x32,(byte)0x31,(byte)0x3A,(byte)0x35,(byte)0x35,(byte)0x20,(byte)0x47,(byte)0x4D,(byte)0x54,(byte)0x0D,(byte)0x0A,(byte)0x43,(byte)0x6F,(byte)0x6E,(byte)0x6E,(byte)0x65,(byte)0x63,(byte)0x74,(byte)0x69,(byte)0x6F,(byte)0x6E,(byte)0x3A,(byte)0x20,(byte)0x63,(byte)0x6C,(byte)0x6F,(byte)0x73,(byte)0x65,(byte)0x0D,(byte)0x0A,(byte)0x0D,(byte)0x0A,(byte)0x3C,(byte)0x21,(byte)0x64,(byte)0x6F,(byte)0x63,(byte)0x74,(byte)0x79,(byte)0x70,(byte)0x65,(byte)0x20,(byte)0x68,(byte)0x74,(byte)0x6D,(byte)0x6C,(byte)0x3E,(byte)0x3C,(byte)0x68,(byte)0x74,(byte)0x6D,(byte)0x6C,(byte)0x20,(byte)0x6C,(byte)0x61,(byte)0x6E,(byte)0x67,(byte)0x3D,(byte)0x22,(byte)0x65,(byte)0x6E,(byte)0x22,(byte)0x3E,(byte)0x3C,(byte)0x68,(byte)0x65,(byte)0x61,(byte)0x64,(byte)0x3E,(byte)0x3C,(byte)0x74,(byte)0x69,(byte)0x74,(byte)0x6C,(byte)0x65,(byte)0x3E,(byte)0x48,(byte)0x54,(byte)0x54,(byte)0x50,(byte)0x20,(byte)0x53,(byte)0x74,(byte)0x61,(byte)0x74,(byte)0x75,(byte)0x73,(byte)0x20,(byte)0x34,(byte)0x30,(byte)0x30,(byte)0x20,(byte)0xE2,(byte)0x80,(byte)0x93,(byte)0x20,(byte)0x42,(byte)0x61,(byte)0x64,(byte)0x20,(byte)0x52,(byte)0x65,(byte)0x71,(byte)0x75,(byte)0x65,(byte)0x73,(byte)0x74,(byte)0x3C,(byte)0x2F,(byte)0x74,(byte)0x69,(byte)0x74,(byte)0x6C,(byte)0x65,(byte)0x3E,(byte)0x3C,(byte)0x73,(byte)0x74,(byte)0x79,(byte)0x6C,(byte)0x65,(byte)0x20,(byte)0x74,(byte)0x79,(byte)0x70,(byte)0x65,(byte)0x3D,(byte)0x22,(byte)0x74,(byte)0x65,(byte)0x78,(byte)0x74,(byte)0x2F,(byte)0x63,(byte)0x73,(byte)0x73,(byte)0x22,(byte)0x3E,(byte)0x68,(byte)0x31,(byte)0x20,(byte)0x7B,(byte)0x66,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x66,(byte)0x61,(byte)0x6D,(byte)0x69,(byte)0x6C,(byte)0x79,(byte)0x3A,(byte)0x54,(byte)0x61,(byte)0x68,(byte)0x6F,(byte)0x6D,(byte)0x61,(byte)0x2C,(byte)0x41,(byte)0x72,(byte)0x69,(byte)0x61,(byte)0x6C,(byte)0x2C,(byte)0x73,(byte)0x61,(byte)0x6E,(byte)0x73,(byte)0x2D,(byte)0x73,(byte)0x65,(byte)0x72,(byte)0x69,(byte)0x66,(byte)0x3B,(byte)0x63,(byte)0x6F,(byte)0x6C,(byte)0x6F,(byte)0x72,(byte)0x3A,(byte)0x77,(byte)0x68,(byte)0x69,(byte)0x74,(byte)0x65,(byte)0x3B,(byte)0x62,(byte)0x61,(byte)0x63,(byte)0x6B,(byte)0x67,(byte)0x72,(byte)0x6F,(byte)0x75,(byte)0x6E,(byte)0x64,(byte)0x2D,(byte)0x63,(byte)0x6F,(byte)0x6C,(byte)0x6F,(byte)0x72,(byte)0x3A,(byte)0x23,(byte)0x35,(byte)0x32,(byte)0x35,(byte)0x44,(byte)0x37,(byte)0x36,(byte)0x3B,(byte)0x66,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x73,(byte)0x69,(byte)0x7A,(byte)0x65,(byte)0x3A,(byte)0x32,(byte)0x32,(byte)0x70,(byte)0x78,(byte)0x3B,(byte)0x7D,(byte)0x20,(byte)0x68,(byte)0x32,(byte)0x20,(byte)0x7B,(byte)0x66,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x66,(byte)0x61,(byte)0x6D,(byte)0x69,(byte)0x6C,(byte)0x79,(byte)0x3A,(byte)0x54,(byte)0x61,(byte)0x68,(byte)0x6F,(byte)0x6D,(byte)0x61,(byte)0x2C,(byte)0x41,(byte)0x72,(byte)0x69,(byte)0x61,(byte)0x6C,(byte)0x2C,(byte)0x73,(byte)0x61,(byte)0x6E,(byte)0x73,(byte)0x2D,(byte)0x73,(byte)0x65,(byte)0x72,(byte)0x69,(byte)0x66,(byte)0x3B,(byte)0x63,(byte)0x6F,(byte)0x6C,(byte)0x6F,(byte)0x72,(byte)0x3A,(byte)0x77,(byte)0x68,(byte)0x69,(byte)0x74,(byte)0x65,(byte)0x3B,(byte)0x62,(byte)0x61,(byte)0x63,(byte)0x6B,(byte)0x67,(byte)0x72,(byte)0x6F,(byte)0x75,(byte)0x6E,(byte)0x64,(byte)0x2D,(byte)0x63,(byte)0x6F,(byte)0x6C,(byte)0x6F,(byte)0x72,(byte)0x3A,(byte)0x23,(byte)0x35,(byte)0x32,(byte)0x35,(byte)0x44,(byte)0x37,(byte)0x36,(byte)0x3B,(byte)0x66,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x73,(byte)0x69,(byte)0x7A,(byte)0x65,(byte)0x3A,(byte)0x31,(byte)0x36,(byte)0x70,(byte)0x78,(byte)0x3B,(byte)0x7D,(byte)0x20,(byte)0x68,(byte)0x33,(byte)0x20,(byte)0x7B,(byte)0x66,(byte)0x6F,(byte)0x6E,(byte)0x74,(byte)0x2D,(byte)0x66,(byte)0x61,(byte)0x6D,(byte)0x69,(byte)0x6C,(byte)0x79,(byte)0x3A,(byte)0x54,(byte)0x61,(byte)0x68,(byte)0x6F,(byte)0x6D,(byte)0x61,(byte)0x2C,(byte)0x41,(byte)0x72,(byte)0x69,(byte)0x61,(byte)0x6C,(byte)0x2C,(byte)0x73,(byte)0x61,(byte)0x6E,(byte)0x73,(byte)0x2D,(byte)0x73,(byte)0x65,(byte)0x72,(byte)0x69,(byte)0x66,(byte)0x3B,(byte)0x63,(byte)0x6F,(byte)0x6C,(byte)0x6F,(byte)0x72,(byte)0x3A,(byte)0x77,(byte)0x68,(byte)0x69,(byte)0x74,(byte)0x65,(byte)0x3B,(byte)0x62,(byte)0x61,(byte)0x63,(byte)0x6B,(byte)0x67,(byte)0x72,(byte)0x6};
		System.out.println(new String(data,"utf-8"));
	}

}
